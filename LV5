#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(int *V, int n, int i) {
    int najveci = i;
    int lijevi = 2 * i + 1;
    int desni = 2 * i + 2;

    if (lijevi < n && V[lijevi] > V[najveci])
        najveci = lijevi;

    if (desni < n && V[desni] > V[najveci])
        najveci = desni;

    if (najveci != i) {
        swap(&V[i], &V[najveci]);
        heapify(V, n, najveci);
    }
}


void heap_sort(int *V, int n) {
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(V, n, i);
    }
    for (int i = n - 1; i > 0; i--) {
        swap(&V[0], &V[i]);
        heapify(V, i, 0);
    }
}

void bubble_sort(int *V, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (V[j] > V[j + 1]) {
                swap(&V[j], &V[j + 1]);
            }
        }
    }
}

void merge(int *V, int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++) {
        L[i] = V[l + i];
    }
    for (j = 0; j < n2; j++) {
        R[j] = V[m + 1 + j];
    }
    
    i = 0;
    j = 0;
    k = l;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            V[k] = L[i];
            i++;
        } else {
            V[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        V[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        V[k] = R[j];
        j++;
        k++;
    }
}


void merge_sort(int *V, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        merge_sort(V, l, m);
        merge_sort(V, m + 1, r);
        merge(V, l, m, r);
    }
}

int main() {
    int n;
    time_t t1, t2, t3, t4, t5, t6;
    printf("Unesite veličinu polja: ");
    scanf("%d", &n);

    int *V = (int *)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        V[i] = rand() % 1000;
        printf("%d ", V[i]);
    }
    printf("\n\n");
    
    printf("Bubble Sort:\n");
    t1 = clock();
    bubble_sort(V, n);
    t2 = clock();
    for (int i = 0; i < n; i++) {
        printf("%d ", V[i]);
    }
    printf("\n\n");
    printf("Vrijeme potrebno za Bubble Sort: %lf ms\n", (double)(t2 - t1) / 1000);
    
    printf("\nHeap Sort:\n");
    t3 = clock();
    heap_sort(V, n);
    t4 = clock();
    for (int i = 0; i < n; i++) {
        printf("%d ", V[i]);
    }
    printf("\n\n");
    printf("Vrijeme potrebno za Heap Sort: %lf ms\n", (double)(t4 - t3) / 1000);

    printf("\nMerge Sort:\n");
    t5 = clock();
    merge_sort(V, 0, n - 1);
    t6 = clock();
    for (int i = 0; i < n; i++) {
        printf("%d ", V[i]);
    }
    printf("\n\n");
    printf("Vrijeme potrebno za Merge Sort: %lf ms\n", (double)(t6 - t5) / 1000);

    free(V);

    return 0;
}
